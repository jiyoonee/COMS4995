{"version":3,"sources":["components/Login.js","components/Playing.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","useEffect","params","access_token","spotifyWebApi","setAccessToken","setAuth","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","getHashParams","className","style","fontSize","fontWeight","href","id","Playing","useState","name","img","nowPlaying","setNowPlaying","textAlign","fontFamily","paddingTop","color","src","width","padding","alt","onClick","getMyCurrentPlaybackState","then","res","item","album","images","url","App","Spotify","isAuthenticated","exact","path","to","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qUAmCeA,MAhCf,SAAgBC,GACdC,qBAAU,WACJC,EAAOC,eACTH,EAAMI,cAAcC,eAAeH,EAAOC,cAC1CH,EAAMM,SAAQ,MAEf,IACH,IASMJ,EATgB,WAIpB,IAHA,IACIK,EADAC,EAAa,GACVC,EAAI,uBACPC,EAAIC,OAAOC,SAASC,KAAKC,UAAU,GAC/BP,EAAIE,EAAEM,KAAKL,IAChBF,EAAWD,EAAE,IAAMS,mBAAmBT,EAAE,IAE3C,OAAOC,EAEMS,GACf,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,cAAf,gCAEE,yBAAKC,MAAO,CAAEC,SAAU,OAAQC,WAAY,QAA5C,mBAEF,yBAAKH,UAAU,gBACb,uBAAGI,KAAK,+BACN,4BAAQC,GAAG,eAAX,0B,MCFKC,MAvBf,SAAkBxB,GAAQ,IAAD,EACayB,mBAAS,CAACC,KAAM,cAAeC,IAAK,KADjD,mBAChBC,EADgB,KACJC,EADI,KAQvB,OACE,yBAAKX,UAAU,WACb,yBAAKC,MAAO,CAACW,UAAW,SAAUC,WAAY,SAAUC,WAAY,SAClE,yBAAKb,MAAO,CAACc,MAAO,QAASD,WAAY,SAAzC,gBAAgEJ,EAAWF,MAC3E,yBAAKQ,IAAKN,EAAWD,IAAKR,MAAO,CAACgB,MAAO,QAASC,QAAS,QAASC,IAAI,KACxE,6BACE,4BAAQC,QAZM,WACpBtC,EAAMI,cAAcmC,4BACnBC,MAAK,SAACC,GACLZ,EAAc,CAACH,KAAMe,EAAIC,KAAKhB,KAAMC,IAAKc,EAAIC,KAAKC,MAAMC,OAAO,GAAGC,WAS9D,2B,yBCMKC,MAjBf,WACE,IAAM1C,EAAgB,IAAI2C,IADZ,EAEqBtB,oBAAS,GAF9B,mBAEPuB,EAFO,KAEU1C,EAFV,KAGd,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2C,OAAK,EAACC,KAAK,KACfF,EAAkB,kBAAC,IAAD,CAAUG,GAAG,aAAgB,kBAAC,EAAD,CAAO/C,cAAeA,EAAeE,QAASA,KAEhG,kBAAC,IAAD,CAAO2C,OAAK,EAACC,KAAK,YAChB,kBAAC,EAAD,CAAS9C,cAAeA,QCJdgD,QACW,cAA7BzC,OAAOC,SAASyC,UAEe,UAA7B1C,OAAOC,SAASyC,UAEhB1C,OAAOC,SAASyC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.755c1b60.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport './Login.css'\n\nfunction Login (props) {\n  useEffect(() => {\n    if (params.access_token) {\n      props.spotifyWebApi.setAccessToken(params.access_token)\n      props.setAuth(true)\n    }\n  }, [])\n  const getHashParams = () => {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n  const params = getHashParams()\n  return (\n    <div className=\"Content\">\n      <div className=\"Intro-Text\">\n        Welcome to Visualize-Spotify!\n        <div style={{ fontSize: \"20px\", fontWeight: \"300\" }}>Login to start</div>\n      </div>\n      <div className=\"Login-Button\">\n        <a href=\"http://localhost:8888/login\">\n          <button id=\"auth-button\">LOGIN WITH SPOTIFY</button>\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport default Login\n","import React, { useState } from 'react'\nimport './Playing.css'\n\nfunction Playing (props) {\n  const [nowPlaying, setNowPlaying] = useState({name: 'Not Checked', img: ''})\n  const getNowPlaying = () => {\n    props.spotifyWebApi.getMyCurrentPlaybackState()\n    .then((res) => {\n      setNowPlaying({name: res.item.name, img: res.item.album.images[0].url})\n    })\n  }\n  return (\n    <div className=\"Content\">\n      <div style={{textAlign: 'center', fontFamily: 'Avenir', paddingTop: '12em'}}>\n        <div style={{color: 'white', paddingTop: '20px'}}>Now Playing: {nowPlaying.name}</div>\n        <img src={nowPlaying.img} style={{width: '200px', padding: '20px'}} alt=''/>\n        <div>\n          <button onClick={getNowPlaying}>\n            Get Current Playing\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Playing\n","import React, { useState } from 'react'\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\nimport { Login, Playing } from './components'\nimport './App.css'\nimport Spotify from 'spotify-web-api-js'\n\nfunction App () {\n  const spotifyWebApi = new Spotify(); \n  const [isAuthenticated, setAuth] = useState(false)\n  return (\n    <Router>\n      <Switch>\n        <Route exact path='/'>\n          {isAuthenticated ? <Redirect to='/playing' /> : <Login spotifyWebApi={spotifyWebApi} setAuth={setAuth} />}\n        </Route>\n        <Route exact path='/playing'>\n          <Playing spotifyWebApi={spotifyWebApi} />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}